# This workflowwill build and deploy the server-less architecture Lambda , API gateway using aws sam command

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy UI to s3

on:
  workflow_dispatch:
    inputs:
      env:
        required: true
        type: environment
        default: 'dev'
      working-directory:
        required: false
        type: string
        default: '.'

#  pull_request:
#    branches: [ main ]
#   push:
#     branches: [ main ]

permissions:  # added using https://github.com/step-security/secure-workflows
  id-token: write
  contents: read


jobs:

  build-and-deploy:

    # important to specify environment here, defaults to 'dev', so GitHub ations knows where to retrieve the secrets
    environment: ${{ inputs.env || 'dev' }}

    # env variables have to be defined after "environment", so GitHub actions knows where to retrieve the secrets
    env:
      ROLE_TO_ASSUME: ${{ secrets.ROLE_TO_ASSUME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

    runs-on: ubuntu-latest
    permissions:
      id-token: write # need this for OIDC
      contents: read

    # dependabot PRs do not need to run this flow as GitHub prohibits dependabot PRs to access workflows
    # dealing with secrets due to security reason.
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Print debug info
        run: |
          echo environment                : ${{ inputs.env || 'dev' }}
          echo working_directory          : ${{ inputs.working-directory }}
          echo AWS_REGION                 : ${{ secrets.AWS_REGION }} | sed -e 's/\(.\)/\1 /g'
          echo S3_BUCKET_NAME             : ${{ secrets.S3_BUCKET_NAME }} | sed -e 's/\(.\)/\1 /g'
          echo CLOUDFRONT_DISTRIBUTION_ID : ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} | sed -e 's/\(.\)/\1 /g'

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: 'npm'
          cache-dependency-path: '${{ inputs.working-directory}}/package-lock.json'  

      - name: Install dependencies
        run: npm install
          
      - name: Generate build
        #run: npm run build:${{ inputs.env || 'dev' }}
        run: npm run build

      - name: build path
        run: |
          pwd \
          && cd ${{ inputs.build-dir }} \
          && echo ************ BUILD PATH **************** \
          && ls -l
