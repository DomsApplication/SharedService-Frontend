# This workflowwill build and deploy the server-less architecture Lambda , API gateway using aws sam command

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Frontend Deployment

on:
  workflow_dispatch:
    inputs:
      env:
        description: "this is environment"
        required: true
        type: environment
        default: 'dev'
      working-directory:
        description: "specify the working directory"
        required: false
        type: string
        default: './frontend'
      build-dir:
        description: "build directory"
        required: true
        type: string
        default: dist


#  pull_request:
#    branches: [ main ]
#   push:
#     branches: [ main ]

permissions:  # added using https://github.com/step-security/secure-workflows
  id-token: write
  contents: read


jobs:

  build-and-deploy:

    # important to specify environment here, defaults to 'dev', so GitHub ations knows where to retrieve the secrets
    environment: ${{ inputs.env || 'dev' }}

    # env variables have to be defined after "environment", so GitHub actions knows where to retrieve the secrets
    env:
      ROLE_TO_ASSUME: ${{ secrets.ROLE_TO_ASSUME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

    runs-on: ubuntu-latest
    permissions:
      id-token: write # need this for OIDC
      contents: read

    # dependabot PRs do not need to run this flow as GitHub prohibits dependabot PRs to access workflows
    # dealing with secrets due to security reason.
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}

      - name: Print debug info
        run: |
          echo environment                : ${{ inputs.env || 'dev' }}
          echo working_directory          : ${{ inputs.working-directory }}
          echo CLOUDFRONT_DISTRIBUTION_ID : ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          echo S3_BUCKET_NAME             : ${{ secrets.S3_BUCKET_NAME }}

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: '${{ inputs.working-directory }}/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd ${{ inputs.working-directory }}
          npm install
        env:
          CI: true
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Generate build
        run: |
          cd ${{ inputs.working-directory }}
          npm run build:${{ inputs.env || 'dev' }}
        #run: npm run build
        #run: yarn build-${{ inputs.env || 'dev' }}
        #run: yarn build

      - name: build path
        run: |
          pwd \
          && cd ${{ inputs.working-directory }} \
          && echo ************ BUILD PATH **************** \
          && ls -l

      - name: Zip the code and deploy to s3
        run: |
          cd ${{ inputs.working-directory }}
          aws s3 sync ./${{ inputs.build-dir }} s3://${{ secrets.S3_BUCKET_NAME }}

      - name: Invalidate cloudFront cache
        run: |
          cd ${{ inputs.working-directory }}
          CLOUDFRONT_INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*" | jq -e -n -r 'input.Invalidation.Id')
          echo "Invalidation Id is: $CLOUDFRONT_INVALIDATION_ID"
          echo "CLOUDFRONT_INVALIDATION_ID=$CLOUDFRONT_INVALIDATION_ID" >> $GITHUB_ENV

      - name: Wait for completion of cloudfront invalidation
        id: wait-for-cache-invalidation-completed
        run: |
          cd ${{ inputs.working-directory }}
          set +e
          WAIT_FOR_INVALIDATION_SECONDS=180
          timeout "$WAIT_FOR_INVALIDATION_SECONDS" /bin/bash -s <<SCRIPT
            while ! timeout 3 aws cloudfront get-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --id $CLOUDFRONT_INVALIDATION_ID | jq -e -n -r 'input.Invalidation.Status' | grep -q 'Completed'; do
              echo "Invalidation status of id=$CLOUDFRONT_INVALIDATION_ID is not yet 'Completed', trying again..."
              sleep 1
            done
          SCRIPT
          if [ "$?" = 0 ]
          then
            echo "Invalidation of id=$CLOUDFRONT_INVALIDATION_ID completed"
            echo "CLOUDFRONT_INVALIDATION_COMPLETED=true" >> $GITHUB_ENV
          else
            echo "warning: Invalidation incomplete after waiting for $WAIT_FOR_INVALIDATION_SECONDS seconds, skipping of old artifacts"
            echo "CLOUDFRONT_INVALIDATION_COMPLETED=false" >> $GITHUB_ENV
          fi
          set -e

      - name: Delete previous deployment artifacts
        if: env.CLOUDFRONT_INVALIDATION_COMPLETED == 'true'
        run: |
          cd ${{ inputs.working-directory }}
          aws s3 sync --delete ./${{ inputs.build-dir }} s3://${{ secrets.S3_BUCKET_NAME }}

